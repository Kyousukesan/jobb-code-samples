// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"drama-go/internal/model"
)

func newBook(db *gorm.DB, opts ...gen.DOOption) book {
	_book := book{}

	_book.bookDo.UseDB(db, opts...)
	_book.bookDo.UseModel(&model.Book{})

	tableName := _book.bookDo.TableName()
	_book.ALL = field.NewAsterisk(tableName)
	_book.BookID = field.NewInt32(tableName, "book_id")
	_book.BookNo = field.NewString(tableName, "book_no")
	_book.Channel = field.NewInt32(tableName, "channel")
	_book.IsCompleted = field.NewInt32(tableName, "is_completed")
	_book.Seconds = field.NewInt32(tableName, "seconds")
	_book.Chapters = field.NewInt32(tableName, "chapters")
	_book.Stars = field.NewInt32(tableName, "stars")
	_book.Weight = field.NewInt32(tableName, "weight")
	_book.IsHidden = field.NewBool(tableName, "is_hidden")
	_book.IsInBlacklist = field.NewBool(tableName, "is_in_blacklist")
	_book.IsAdUnlock = field.NewInt32(tableName, "is_ad_unlock")
	_book.IsSocialMedia = field.NewInt32(tableName, "is_social_media")
	_book.SocialMediaReach = field.NewInt32(tableName, "social_media_reach")
	_book.IsMcn = field.NewInt32(tableName, "is_mcn")
	_book.Status = field.NewString(tableName, "status")
	_book.PublicedAt = field.NewTime(tableName, "publiced_at")
	_book.RefreshedAt = field.NewTime(tableName, "refreshed_at")
	_book.BookName = field.NewString(tableName, "book_name")
	_book.EnglishName = field.NewString(tableName, "english_name")
	_book.CoverKey = field.NewString(tableName, "cover_key")
	_book.HorizontalCoverKey = field.NewString(tableName, "horizontal_cover_key")
	_book.BannerCoverKey = field.NewString(tableName, "banner_cover_key")
	_book.ClearBannerCoverKey = field.NewString(tableName, "clear_banner_cover_key")
	_book.HorizontalBannerCoverKey = field.NewString(tableName, "horizontal_banner_cover_key")
	_book.AuthorName = field.NewString(tableName, "author_name")
	_book.AuthorAvatarKey = field.NewString(tableName, "author_avatar_key")
	_book.Lang = field.NewString(tableName, "lang")
	_book.Category = field.NewString(tableName, "category")
	_book.Category2 = field.NewString(tableName, "category2")
	_book.CateID = field.NewInt32(tableName, "cate_id")
	_book.Introduce = field.NewString(tableName, "introduce")
	_book.Tag = field.NewString(tableName, "tag")
	_book.RecommendIntro = field.NewString(tableName, "recommend_intro")
	_book.Source = field.NewString(tableName, "source")
	_book.SourceDetail = field.NewString(tableName, "source_detail")
	_book.ProducerID = field.NewInt32(tableName, "producer_id")
	_book.KujiangBookID = field.NewInt32(tableName, "kujiang_book_id")
	_book.DramaType = field.NewInt32(tableName, "drama_type")
	_book.BookSource = field.NewInt32(tableName, "book_source")
	_book.OriBookID = field.NewInt32(tableName, "ori_book_id")
	_book.TotalChargeAmount = field.NewFloat64(tableName, "total_charge_amount")
	_book.TodayChargeAmount = field.NewFloat64(tableName, "today_charge_amount")
	_book.YesterdayChargeAmount = field.NewFloat64(tableName, "yesterday_charge_amount")
	_book.ReadCount = field.NewInt32(tableName, "read_count")
	_book.TodayReadCount = field.NewInt32(tableName, "today_read_count")
	_book.YesterdayReadCount = field.NewInt32(tableName, "yesterday_read_count")
	_book.Remarks = field.NewString(tableName, "remarks")
	_book.CreatedAt = field.NewTime(tableName, "created_at")
	_book.UpdatedAt = field.NewTime(tableName, "updated_at")
	_book.IsOriginal = field.NewInt32(tableName, "is_original")
	_book.IsBindWriter = field.NewBool(tableName, "is_bind_writer")
	_book.WriterID = field.NewInt32(tableName, "writer_id")
	_book.CopyrightBy = field.NewString(tableName, "copyright_by")
	_book.ProducerCompany = field.NewString(tableName, "producer_company")
	_book.Director = field.NewString(tableName, "director")
	_book.ChannelSource = field.NewBool(tableName, "channel_source")
	_book.OwnCopyright = field.NewInt32(tableName, "own_copyright")
	_book.TagIds = field.NewString(tableName, "tag_ids")
	_book.BookAttr = field.NewInt32(tableName, "book_attr")
	_book.DramaRating = field.NewBool(tableName, "drama_rating")
	_book.FirstReleaseTime = field.NewTime(tableName, "first_release_time")
	_book.ReleaseTime = field.NewTime(tableName, "release_time")
	_book.NativeName = field.NewString(tableName, "native_name")
	_book.LanguageName = field.NewString(tableName, "language_name")
	_book.LanguageKey = field.NewString(tableName, "language_key")
	_book.MotherBookID = field.NewInt32(tableName, "mother_book_id")
	_book.MotherChildType = field.NewInt32(tableName, "mother_child_type")
	_book.DebutTime = field.NewTime(tableName, "debut_time")
	_book.DramaLength = field.NewBool(tableName, "drama_length")
	_book.DecommissionDate = field.NewTime(tableName, "decommission_date")
	_book.SourceRootBookID = field.NewInt32(tableName, "source_root_book_id")
	_book.VideoAccount = field.NewString(tableName, "video_account")
	_book.ListingDate = field.NewTime(tableName, "listing_date")
	_book.FancyStatus = field.NewString(tableName, "fancy_status")

	_book.fillFieldMap()

	return _book
}

// book 作品表
type book struct {
	bookDo

	ALL                      field.Asterisk
	BookID                   field.Int32   // 作品ID
	BookNo                   field.String  // 短剧编号
	Channel                  field.Int32   // 频道，1=男频，2=女频，0=未设置
	IsCompleted              field.Int32   // 是否完本，1=完本，0=连载
	Seconds                  field.Int32   // 时长(秒)
	Chapters                 field.Int32   // 章节数
	Stars                    field.Int32   // 星级派单指数
	Weight                   field.Int32   // 排序用
	IsHidden                 field.Bool    // 日常显示，0=显示，1=隐藏
	IsInBlacklist            field.Bool    // 是否在黑名单，0=否，1=是
	IsAdUnlock               field.Int32   // 广告解锁 0 关 1 开
	IsSocialMedia            field.Int32   // 社媒可用 0 否 1 是
	SocialMediaReach         field.Int32   // 社媒使用范围 0 未配置 1 全集 2 免费集 3 30%
	IsMcn                    field.Int32   // 是否MCN使用 0 否 1 是
	Status                   field.String  // 状态，normal=上架，del=下架
	PublicedAt               field.Time    // 公开时间
	RefreshedAt              field.Time    // 更新时间
	BookName                 field.String  // 书名
	EnglishName              field.String  // 英文名
	CoverKey                 field.String  // 封面图key
	HorizontalCoverKey       field.String  // 横版封面图key
	BannerCoverKey           field.String  // banner封面图key
	ClearBannerCoverKey      field.String  // 清晰banner竖版封面图
	HorizontalBannerCoverKey field.String  // 横板banner封面图key
	AuthorName               field.String  // 作者名
	AuthorAvatarKey          field.String  // 作者头像key
	Lang                     field.String  // 语言
	Category                 field.String  // 分类
	Category2                field.String  // 二级分类
	CateID                   field.Int32   // 媒体分类ID
	Introduce                field.String  // 简介
	Tag                      field.String  // 标记
	RecommendIntro           field.String  // 推荐语
	Source                   field.String  // 来源
	SourceDetail             field.String  // 详细来源
	ProducerID               field.Int32   // 制作方ID
	KujiangBookID            field.Int32   // 酷匠作品ID
	DramaType                field.Int32   // 1->成品剧,2->定制剧
	BookSource               field.Int32   // 短剧来源 0 新剧 1 复刻剧，最新：1：自制欧美剧、2：自制翻译剧、3：引入欧美剧、4：引入翻译剧、5：置换欧美剧、6：置换翻译剧"，
	OriBookID                field.Int32   // 原始书号
	TotalChargeAmount        field.Float64 // 总充值
	TodayChargeAmount        field.Float64 // 今日充值
	YesterdayChargeAmount    field.Float64 // 昨日充值
	ReadCount                field.Int32   // 总阅读人数
	TodayReadCount           field.Int32   // 今日阅读人数
	YesterdayReadCount       field.Int32   // 昨日阅读人数
	Remarks                  field.String  // 备注
	CreatedAt                field.Time    // 创建时间
	UpdatedAt                field.Time    // 修改时间
	IsOriginal               field.Int32   // 是否原创(0:非原创,1:原创，2：未编辑【默认】)
	IsBindWriter             field.Bool    // 是否绑定编剧(0:未绑定【默认】，1：已绑定)
	WriterID                 field.Int32   // 编剧编号
	CopyrightBy              field.String  // 版权归属
	ProducerCompany          field.String  // 制作公司
	Director                 field.String  // 导演
	ChannelSource            field.Bool    // 渠道来源: 1-自制剧  2-引入剧(中) 3-引入剧(外) 4-其他
	OwnCopyright             field.Int32   // 有无版权，0: 未知,1:拥有,2:未拥有
	TagIds                   field.String  // 标签列表-冗余
	BookAttr                 field.Int32   // 短剧属性 1 本土剧 2 翻译剧
	DramaRating              field.Bool    // 评级
	FirstReleaseTime         field.Time    // 首次上线时间
	ReleaseTime              field.Time    // 上线时间
	NativeName               field.String  // 本土化剧名
	LanguageName             field.String  // 语种名称
	LanguageKey              field.String  // 语种key
	MotherBookID             field.Int32   // 母剧ID
	MotherChildType          field.Int32   // 子母剧类型 0母剧  1子剧
	DebutTime                field.Time    // 首发时间
	DramaLength              field.Bool    // 篇幅：1-短篇 2-长篇
	DecommissionDate         field.Time    // 下架时间
	SourceRootBookID         field.Int32   // 母剧子剧的原始短剧id
	VideoAccount             field.String  // 初始sn1 新增ss1,ss2
	ListingDate              field.Time    // 免费渠道可上架日期
	FancyStatus              field.String  // 短剧在fancy状态：del-下架 normal-上架

	fieldMap map[string]field.Expr
}

func (b book) Table(newTableName string) *book {
	b.bookDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b book) As(alias string) *book {
	b.bookDo.DO = *(b.bookDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *book) updateTableName(table string) *book {
	b.ALL = field.NewAsterisk(table)
	b.BookID = field.NewInt32(table, "book_id")
	b.BookNo = field.NewString(table, "book_no")
	b.Channel = field.NewInt32(table, "channel")
	b.IsCompleted = field.NewInt32(table, "is_completed")
	b.Seconds = field.NewInt32(table, "seconds")
	b.Chapters = field.NewInt32(table, "chapters")
	b.Stars = field.NewInt32(table, "stars")
	b.Weight = field.NewInt32(table, "weight")
	b.IsHidden = field.NewBool(table, "is_hidden")
	b.IsInBlacklist = field.NewBool(table, "is_in_blacklist")
	b.IsAdUnlock = field.NewInt32(table, "is_ad_unlock")
	b.IsSocialMedia = field.NewInt32(table, "is_social_media")
	b.SocialMediaReach = field.NewInt32(table, "social_media_reach")
	b.IsMcn = field.NewInt32(table, "is_mcn")
	b.Status = field.NewString(table, "status")
	b.PublicedAt = field.NewTime(table, "publiced_at")
	b.RefreshedAt = field.NewTime(table, "refreshed_at")
	b.BookName = field.NewString(table, "book_name")
	b.EnglishName = field.NewString(table, "english_name")
	b.CoverKey = field.NewString(table, "cover_key")
	b.HorizontalCoverKey = field.NewString(table, "horizontal_cover_key")
	b.BannerCoverKey = field.NewString(table, "banner_cover_key")
	b.ClearBannerCoverKey = field.NewString(table, "clear_banner_cover_key")
	b.HorizontalBannerCoverKey = field.NewString(table, "horizontal_banner_cover_key")
	b.AuthorName = field.NewString(table, "author_name")
	b.AuthorAvatarKey = field.NewString(table, "author_avatar_key")
	b.Lang = field.NewString(table, "lang")
	b.Category = field.NewString(table, "category")
	b.Category2 = field.NewString(table, "category2")
	b.CateID = field.NewInt32(table, "cate_id")
	b.Introduce = field.NewString(table, "introduce")
	b.Tag = field.NewString(table, "tag")
	b.RecommendIntro = field.NewString(table, "recommend_intro")
	b.Source = field.NewString(table, "source")
	b.SourceDetail = field.NewString(table, "source_detail")
	b.ProducerID = field.NewInt32(table, "producer_id")
	b.KujiangBookID = field.NewInt32(table, "kujiang_book_id")
	b.DramaType = field.NewInt32(table, "drama_type")
	b.BookSource = field.NewInt32(table, "book_source")
	b.OriBookID = field.NewInt32(table, "ori_book_id")
	b.TotalChargeAmount = field.NewFloat64(table, "total_charge_amount")
	b.TodayChargeAmount = field.NewFloat64(table, "today_charge_amount")
	b.YesterdayChargeAmount = field.NewFloat64(table, "yesterday_charge_amount")
	b.ReadCount = field.NewInt32(table, "read_count")
	b.TodayReadCount = field.NewInt32(table, "today_read_count")
	b.YesterdayReadCount = field.NewInt32(table, "yesterday_read_count")
	b.Remarks = field.NewString(table, "remarks")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsOriginal = field.NewInt32(table, "is_original")
	b.IsBindWriter = field.NewBool(table, "is_bind_writer")
	b.WriterID = field.NewInt32(table, "writer_id")
	b.CopyrightBy = field.NewString(table, "copyright_by")
	b.ProducerCompany = field.NewString(table, "producer_company")
	b.Director = field.NewString(table, "director")
	b.ChannelSource = field.NewBool(table, "channel_source")
	b.OwnCopyright = field.NewInt32(table, "own_copyright")
	b.TagIds = field.NewString(table, "tag_ids")
	b.BookAttr = field.NewInt32(table, "book_attr")
	b.DramaRating = field.NewBool(table, "drama_rating")
	b.FirstReleaseTime = field.NewTime(table, "first_release_time")
	b.ReleaseTime = field.NewTime(table, "release_time")
	b.NativeName = field.NewString(table, "native_name")
	b.LanguageName = field.NewString(table, "language_name")
	b.LanguageKey = field.NewString(table, "language_key")
	b.MotherBookID = field.NewInt32(table, "mother_book_id")
	b.MotherChildType = field.NewInt32(table, "mother_child_type")
	b.DebutTime = field.NewTime(table, "debut_time")
	b.DramaLength = field.NewBool(table, "drama_length")
	b.DecommissionDate = field.NewTime(table, "decommission_date")
	b.SourceRootBookID = field.NewInt32(table, "source_root_book_id")
	b.VideoAccount = field.NewString(table, "video_account")
	b.ListingDate = field.NewTime(table, "listing_date")
	b.FancyStatus = field.NewString(table, "fancy_status")

	b.fillFieldMap()

	return b
}

func (b *book) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *book) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 74)
	b.fieldMap["book_id"] = b.BookID
	b.fieldMap["book_no"] = b.BookNo
	b.fieldMap["channel"] = b.Channel
	b.fieldMap["is_completed"] = b.IsCompleted
	b.fieldMap["seconds"] = b.Seconds
	b.fieldMap["chapters"] = b.Chapters
	b.fieldMap["stars"] = b.Stars
	b.fieldMap["weight"] = b.Weight
	b.fieldMap["is_hidden"] = b.IsHidden
	b.fieldMap["is_in_blacklist"] = b.IsInBlacklist
	b.fieldMap["is_ad_unlock"] = b.IsAdUnlock
	b.fieldMap["is_social_media"] = b.IsSocialMedia
	b.fieldMap["social_media_reach"] = b.SocialMediaReach
	b.fieldMap["is_mcn"] = b.IsMcn
	b.fieldMap["status"] = b.Status
	b.fieldMap["publiced_at"] = b.PublicedAt
	b.fieldMap["refreshed_at"] = b.RefreshedAt
	b.fieldMap["book_name"] = b.BookName
	b.fieldMap["english_name"] = b.EnglishName
	b.fieldMap["cover_key"] = b.CoverKey
	b.fieldMap["horizontal_cover_key"] = b.HorizontalCoverKey
	b.fieldMap["banner_cover_key"] = b.BannerCoverKey
	b.fieldMap["clear_banner_cover_key"] = b.ClearBannerCoverKey
	b.fieldMap["horizontal_banner_cover_key"] = b.HorizontalBannerCoverKey
	b.fieldMap["author_name"] = b.AuthorName
	b.fieldMap["author_avatar_key"] = b.AuthorAvatarKey
	b.fieldMap["lang"] = b.Lang
	b.fieldMap["category"] = b.Category
	b.fieldMap["category2"] = b.Category2
	b.fieldMap["cate_id"] = b.CateID
	b.fieldMap["introduce"] = b.Introduce
	b.fieldMap["tag"] = b.Tag
	b.fieldMap["recommend_intro"] = b.RecommendIntro
	b.fieldMap["source"] = b.Source
	b.fieldMap["source_detail"] = b.SourceDetail
	b.fieldMap["producer_id"] = b.ProducerID
	b.fieldMap["kujiang_book_id"] = b.KujiangBookID
	b.fieldMap["drama_type"] = b.DramaType
	b.fieldMap["book_source"] = b.BookSource
	b.fieldMap["ori_book_id"] = b.OriBookID
	b.fieldMap["total_charge_amount"] = b.TotalChargeAmount
	b.fieldMap["today_charge_amount"] = b.TodayChargeAmount
	b.fieldMap["yesterday_charge_amount"] = b.YesterdayChargeAmount
	b.fieldMap["read_count"] = b.ReadCount
	b.fieldMap["today_read_count"] = b.TodayReadCount
	b.fieldMap["yesterday_read_count"] = b.YesterdayReadCount
	b.fieldMap["remarks"] = b.Remarks
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_original"] = b.IsOriginal
	b.fieldMap["is_bind_writer"] = b.IsBindWriter
	b.fieldMap["writer_id"] = b.WriterID
	b.fieldMap["copyright_by"] = b.CopyrightBy
	b.fieldMap["producer_company"] = b.ProducerCompany
	b.fieldMap["director"] = b.Director
	b.fieldMap["channel_source"] = b.ChannelSource
	b.fieldMap["own_copyright"] = b.OwnCopyright
	b.fieldMap["tag_ids"] = b.TagIds
	b.fieldMap["book_attr"] = b.BookAttr
	b.fieldMap["drama_rating"] = b.DramaRating
	b.fieldMap["first_release_time"] = b.FirstReleaseTime
	b.fieldMap["release_time"] = b.ReleaseTime
	b.fieldMap["native_name"] = b.NativeName
	b.fieldMap["language_name"] = b.LanguageName
	b.fieldMap["language_key"] = b.LanguageKey
	b.fieldMap["mother_book_id"] = b.MotherBookID
	b.fieldMap["mother_child_type"] = b.MotherChildType
	b.fieldMap["debut_time"] = b.DebutTime
	b.fieldMap["drama_length"] = b.DramaLength
	b.fieldMap["decommission_date"] = b.DecommissionDate
	b.fieldMap["source_root_book_id"] = b.SourceRootBookID
	b.fieldMap["video_account"] = b.VideoAccount
	b.fieldMap["listing_date"] = b.ListingDate
	b.fieldMap["fancy_status"] = b.FancyStatus
}

func (b book) clone(db *gorm.DB) book {
	b.bookDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b book) replaceDB(db *gorm.DB) book {
	b.bookDo.ReplaceDB(db)
	return b
}

type bookDo struct{ gen.DO }

type IBookDo interface {
	gen.SubQuery
	Debug() IBookDo
	WithContext(ctx context.Context) IBookDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBookDo
	WriteDB() IBookDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBookDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBookDo
	Not(conds ...gen.Condition) IBookDo
	Or(conds ...gen.Condition) IBookDo
	Select(conds ...field.Expr) IBookDo
	Where(conds ...gen.Condition) IBookDo
	Order(conds ...field.Expr) IBookDo
	Distinct(cols ...field.Expr) IBookDo
	Omit(cols ...field.Expr) IBookDo
	Join(table schema.Tabler, on ...field.Expr) IBookDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBookDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBookDo
	Group(cols ...field.Expr) IBookDo
	Having(conds ...gen.Condition) IBookDo
	Limit(limit int) IBookDo
	Offset(offset int) IBookDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBookDo
	Unscoped() IBookDo
	Create(values ...*model.Book) error
	CreateInBatches(values []*model.Book, batchSize int) error
	Save(values ...*model.Book) error
	First() (*model.Book, error)
	Take() (*model.Book, error)
	Last() (*model.Book, error)
	Find() ([]*model.Book, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Book, err error)
	FindInBatches(result *[]*model.Book, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Book) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBookDo
	Assign(attrs ...field.AssignExpr) IBookDo
	Joins(fields ...field.RelationField) IBookDo
	Preload(fields ...field.RelationField) IBookDo
	FirstOrInit() (*model.Book, error)
	FirstOrCreate() (*model.Book, error)
	FindByPage(offset int, limit int) (result []*model.Book, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBookDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bookDo) Debug() IBookDo {
	return b.withDO(b.DO.Debug())
}

func (b bookDo) WithContext(ctx context.Context) IBookDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bookDo) ReadDB() IBookDo {
	return b.Clauses(dbresolver.Read)
}

func (b bookDo) WriteDB() IBookDo {
	return b.Clauses(dbresolver.Write)
}

func (b bookDo) Session(config *gorm.Session) IBookDo {
	return b.withDO(b.DO.Session(config))
}

func (b bookDo) Clauses(conds ...clause.Expression) IBookDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bookDo) Returning(value interface{}, columns ...string) IBookDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bookDo) Not(conds ...gen.Condition) IBookDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bookDo) Or(conds ...gen.Condition) IBookDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bookDo) Select(conds ...field.Expr) IBookDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bookDo) Where(conds ...gen.Condition) IBookDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bookDo) Order(conds ...field.Expr) IBookDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bookDo) Distinct(cols ...field.Expr) IBookDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bookDo) Omit(cols ...field.Expr) IBookDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bookDo) Join(table schema.Tabler, on ...field.Expr) IBookDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bookDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBookDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bookDo) RightJoin(table schema.Tabler, on ...field.Expr) IBookDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bookDo) Group(cols ...field.Expr) IBookDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bookDo) Having(conds ...gen.Condition) IBookDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bookDo) Limit(limit int) IBookDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bookDo) Offset(offset int) IBookDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bookDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBookDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bookDo) Unscoped() IBookDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bookDo) Create(values ...*model.Book) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bookDo) CreateInBatches(values []*model.Book, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bookDo) Save(values ...*model.Book) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bookDo) First() (*model.Book, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Book), nil
	}
}

func (b bookDo) Take() (*model.Book, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Book), nil
	}
}

func (b bookDo) Last() (*model.Book, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Book), nil
	}
}

func (b bookDo) Find() ([]*model.Book, error) {
	result, err := b.DO.Find()
	return result.([]*model.Book), err
}

func (b bookDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Book, err error) {
	buf := make([]*model.Book, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bookDo) FindInBatches(result *[]*model.Book, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bookDo) Attrs(attrs ...field.AssignExpr) IBookDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bookDo) Assign(attrs ...field.AssignExpr) IBookDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bookDo) Joins(fields ...field.RelationField) IBookDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bookDo) Preload(fields ...field.RelationField) IBookDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bookDo) FirstOrInit() (*model.Book, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Book), nil
	}
}

func (b bookDo) FirstOrCreate() (*model.Book, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Book), nil
	}
}

func (b bookDo) FindByPage(offset int, limit int) (result []*model.Book, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bookDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bookDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bookDo) Delete(models ...*model.Book) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bookDo) withDO(do gen.Dao) *bookDo {
	b.DO = *do.(*gen.DO)
	return b
}
