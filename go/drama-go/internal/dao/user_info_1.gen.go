// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"drama-go/internal/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.UserID = field.NewInt64(tableName, "user_id")
	_user.Nickname = field.NewString(tableName, "nickname")
	_user.Avatar = field.NewString(tableName, "avatar")
	_user.Sex = field.NewInt32(tableName, "sex")
	_user.Phone = field.NewString(tableName, "phone")
	_user.Lang = field.NewString(tableName, "lang")
	_user.Email = field.NewString(tableName, "email")
	_user.Region = field.NewString(tableName, "region")
	_user.Country2 = field.NewString(tableName, "country2")
	_user.Country1 = field.NewString(tableName, "country1")
	_user.Country = field.NewString(tableName, "country")
	_user.LimitCountry = field.NewString(tableName, "limit_country")
	_user.IsPayUser = field.NewInt32(tableName, "is_pay_user")
	_user.UserType = field.NewInt32(tableName, "user_type")
	_user.IP = field.NewString(tableName, "ip")
	_user.JoinAt = field.NewTime(tableName, "join_at")
	_user.Status = field.NewInt32(tableName, "status")
	_user.SpreadID = field.NewInt32(tableName, "spread_id")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.PromotionChannel = field.NewInt32(tableName, "promotion_channel")
	_user.Platform = field.NewInt32(tableName, "platform")
	_user.Version = field.NewString(tableName, "version")
	_user.Ct = field.NewString(tableName, "ct")
	_user.St = field.NewString(tableName, "st")
	_user.Zp = field.NewString(tableName, "zp")
	_user.RandNum = field.NewInt32(tableName, "rand_num")
	_user.Gaid = field.NewString(tableName, "gaid")
	_user.AppsflyerID = field.NewString(tableName, "appsflyer_id")

	_user.fillFieldMap()

	return _user
}

// user 用户信息表
type user struct {
	userDo

	ALL              field.Asterisk
	UserID           field.Int64  // 用户ID
	Nickname         field.String // 昵称
	Avatar           field.String // 用户头像
	Sex              field.Int32  // 性别 0 未知 1 男 2女
	Phone            field.String // 手机号
	Lang             field.String // 语种 默认英文
	Email            field.String // 电子邮箱
	Region           field.String // 国别
	Country2         field.String // 用户所属国家地区
	Country1         field.String // 用户所属国家地区
	Country          field.String // 用户所属国家地区
	LimitCountry     field.String // 限定使用(支付)国家
	IsPayUser        field.Int32  // 是否付费用户（0不是 1是）
	UserType         field.Int32  // 用户类型：1 流失用户；2 犹豫用户；3 付费用户
	IP               field.String // 用户注册ip
	JoinAt           field.Time   // 注册时间
	Status           field.Int32  // 状态（0封禁1正常2注销）
	SpreadID         field.Int32  // 推广ID
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 修改时间
	PromotionChannel field.Int32  // 推广渠道,见枚举类定义
	Platform         field.Int32  // 注册时的平台
	Version          field.String // 客户端版本号
	Ct               field.String // 城市city
	St               field.String // 洲state
	Zp               field.String // postal_code
	RandNum          field.Int32  // 随机数
	Gaid             field.String // gaid
	AppsflyerID      field.String // af的appsflyer_id

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt64(table, "user_id")
	u.Nickname = field.NewString(table, "nickname")
	u.Avatar = field.NewString(table, "avatar")
	u.Sex = field.NewInt32(table, "sex")
	u.Phone = field.NewString(table, "phone")
	u.Lang = field.NewString(table, "lang")
	u.Email = field.NewString(table, "email")
	u.Region = field.NewString(table, "region")
	u.Country2 = field.NewString(table, "country2")
	u.Country1 = field.NewString(table, "country1")
	u.Country = field.NewString(table, "country")
	u.LimitCountry = field.NewString(table, "limit_country")
	u.IsPayUser = field.NewInt32(table, "is_pay_user")
	u.UserType = field.NewInt32(table, "user_type")
	u.IP = field.NewString(table, "ip")
	u.JoinAt = field.NewTime(table, "join_at")
	u.Status = field.NewInt32(table, "status")
	u.SpreadID = field.NewInt32(table, "spread_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.PromotionChannel = field.NewInt32(table, "promotion_channel")
	u.Platform = field.NewInt32(table, "platform")
	u.Version = field.NewString(table, "version")
	u.Ct = field.NewString(table, "ct")
	u.St = field.NewString(table, "st")
	u.Zp = field.NewString(table, "zp")
	u.RandNum = field.NewInt32(table, "rand_num")
	u.Gaid = field.NewString(table, "gaid")
	u.AppsflyerID = field.NewString(table, "appsflyer_id")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 29)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["sex"] = u.Sex
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["lang"] = u.Lang
	u.fieldMap["email"] = u.Email
	u.fieldMap["region"] = u.Region
	u.fieldMap["country2"] = u.Country2
	u.fieldMap["country1"] = u.Country1
	u.fieldMap["country"] = u.Country
	u.fieldMap["limit_country"] = u.LimitCountry
	u.fieldMap["is_pay_user"] = u.IsPayUser
	u.fieldMap["user_type"] = u.UserType
	u.fieldMap["ip"] = u.IP
	u.fieldMap["join_at"] = u.JoinAt
	u.fieldMap["status"] = u.Status
	u.fieldMap["spread_id"] = u.SpreadID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["promotion_channel"] = u.PromotionChannel
	u.fieldMap["platform"] = u.Platform
	u.fieldMap["version"] = u.Version
	u.fieldMap["ct"] = u.Ct
	u.fieldMap["st"] = u.St
	u.fieldMap["zp"] = u.Zp
	u.fieldMap["rand_num"] = u.RandNum
	u.fieldMap["gaid"] = u.Gaid
	u.fieldMap["appsflyer_id"] = u.AppsflyerID
}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*model.User) error
	CreateInBatches(values []*model.User, batchSize int) error
	Save(values ...*model.User) error
	First() (*model.User, error)
	Take() (*model.User, error)
	Last() (*model.User, error)
	Find() ([]*model.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error)
	FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*model.User, error)
	FirstOrCreate() (*model.User, error)
	FindByPage(offset int, limit int) (result []*model.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
